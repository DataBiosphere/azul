azul_vars=(
    # The path to the project root directory
    AZUL_HOME

    # The name of the current deployment. This variable controls the name of all
    # cloud resources and is the main vehicle for isolating cloud resources
    # between deployments.
    AZUL_DEPLOYMENT_STAGE

    # The URL to the DSS (aka Blue box) REST API
    AZUL_DSS_ENDPOINT

    # The name of the hosted zone in Route 53 in which to create user friendly
    # domain names for various API gateways. This hosted zone will have to be
    # created manually prior to running `make terraform`. The value is typically
    # not deployment specific. A subdomain will automatically be created for
    # each deployment.
    AZUL_DOMAIN_NAME

    # A template for the name of the Route 53 record set in the hosted zone
    # specified by AZUL_DOMAIN_NAME. The string {lambda_name} in the template
    # will be substituted with the name of the Lambda function, e.g. `indexer`
    # or `service`. May contain periods.
    AZUL_SUBDOMAIN_TEMPLATE

    # A prefix to be prepended to the names of AWS Lambda functions and
    # associated resources. Must not contain periods.
    AZUL_RESOURCE_PREFIX

    # The host and port of the Elasticsearch instance to use. This takes
    # precedence over AZUL_ES_DOMAIN.
    AZUL_ES_ENDPOINT

    # The name of the AWS-hosted Elasticsearch instance (not a domain name) to
    # use. The given ES domain's endpoint will be looked up dynamically.
    AZUL_ES_DOMAIN

    # The number of nodes in the AWS-hosted Elasticsearch cluster
    AZUL_ES_INSTANCE_COUNT

    # The EC2 instance type to use for a cluster node
    AZUL_ES_INSTANCE_TYPE

    # The size of the EBS volume backing each cluster node
    AZUL_ES_VOLUME_SIZE

    # FIXME: not actually used outside of tests
    
    # The name of the ES index to be populated in response to events from DSS
    AZUL_ES_INDEX

    # The name of the index containing Specimen entities
    AZUL_SPECIMEN_INDEX

    # The name of the index containing File entities
    AZUL_FILE_INDEX

    # The name of the index containing Donor entities
    AZUL_DONOR_INDEX

    # The name of the bucket where TerraForm maintains its state, allowing
    # multiple developers to collaboratively use TerraForm in a single AWS
    # account. This bucket is likely going be shared with other projects such as
    # DSS and might require some coordination with the developers of those
    # projects. The special string {account_id} is replaced with the ID of the
    # AWS account the currently configured AWS credentials belong to.
    AZUL_TERRAFORM_BACKEND_BUCKET_TEMPLATE

    # The number of workers polling queues for each Lambda invocation
    AZUL_INDEX_WORKERS

    # The number of workers pulling files from DSS. There is one such set of DSS workers per index worker!
    AZUL_DSS_WORKERS
)

unset ${azul_vars[*]}

# FIXME: try to use _set here

AZUL_HOME="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

if [[ ! -f "${AZUL_HOME}/deployments/.active/environment" ]]; then
    echo "Please create a symlink to the active deployment. " \
         "For example 'cd deployments && ln -snf dev .active'"
    return
fi

_set () {
    for var in ${azul_vars[*]}; do
        if [[ "$var" == "$1" ]]; then
            if [[ -n "$PS1" ]]; then
                # Only echo in interactive shells
                echo $BASH_SOURCE: Setting $1 to "'$2'"
            fi
            # Actually set the value
            eval ": \${$1:='$2'}"
            return
        fi
    done
    echo "Error: variable $1 is missing from azul_vars."
    unset ${azul_vars[*]}
    # That's the only way (I know of) we can exit the sourced script from within
    # a function
    kill -SIGINT $$
}

# Set variables specific to the active deployment and the current user. This is
# the most specific level.
if [[ -f "${AZUL_HOME}/deployments/.active/environment.local" ]]; then
    source "${AZUL_HOME}/deployments/.active/environment.local"
fi

# Set variables specific to the active deployment
source "${AZUL_HOME}/deployments/.active/environment"

# Set variables specific to the current user
if [[ -f "${AZUL_HOME}/environment.local" ]]; then
    source "${AZUL_HOME}/environment.local"
fi

# Set the global defaults. This is the least specific level.

_set AZUL_DOMAIN_NAME "azul.data.humancellatlas.org"  # FIXME: project-specific, is this the right place for this?
_set AZUL_SUBDOMAIN_TEMPLATE "{lambda_name}.$AZUL_DEPLOYMENT_STAGE"
_set AZUL_RESOURCE_PREFIX "azul-"
_set AZUL_ES_INDEX "azul-$AZUL_DEPLOYMENT_STAGE"
_set AZUL_ES_DOMAIN "azul-index-$AZUL_DEPLOYMENT_STAGE"
_set AZUL_ES_INSTANCE_COUNT 1
_set AZUL_ES_INSTANCE_TYPE "m4.large.elasticsearch"
_set AZUL_ES_VOLUME_SIZE 35
_set AZUL_INDEX_WORKERS 16
_set AZUL_DSS_WORKERS 8

# FIXME: the index name should contain the stage name so we can share an ES
# instance between deployments. However, the indexer seems to be hard-wired
# to this particular index name.

_set AZUL_FILE_INDEX "browser_files_dev"
_set AZUL_SPECIMEN_INDEX "browser_specimens_dev"
_set AZUL_DONOR_INDEX "browser_donor_dev"

# This is the same TF bucket as the one DSS uses
_set AZUL_TERRAFORM_BACKEND_BUCKET_TEMPLATE "org-humancellatlas-dss-config-{account_id}"

unset -f _set

export ${azul_vars[*]}

# A little helper to make re-sourcing this script easier.

_refresh () {
    source ${AZUL_HOME}/environment
}

export PYTHONPATH="$AZUL_HOME/src"
