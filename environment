# Only variables whose names start in `AZUL_` will be published to a deployed
# Lambda. Note that by implication, `azul_` variables will not be published,
# even though they are considered part of Azul. For secret values that should
# not be printed or logged, use a variable name containing any of the strings
# `secret`, `password` or `token`, either upper or lower case. Think twice
# before publishing variable containing a secret.

azul_vars=(
    # The path to the root directory of the project
    azul_home

    # Controls the verbosity of application logs. Use 0 for no debug logging
    # 1 for debug logging by application code and info logging by other code
    # and 2 for debug logging by all code. This also controls app.debug, a
    # Chalice setting that causes an app to return a traceback in the body of
    # error responses: Setting AZUL_DEBUG to 0 disables the traceback
    # (app.debug = False), 1 or higher enable it (app.debug = True).
    # See https://github.com/aws/chalice#tutorial-error-messages for more.
    AZUL_DEBUG

    # The name of the current deployment. This variable controls the name of all
    # cloud resources and is the main vehicle for isolating cloud resources
    # between deployments.
    AZUL_DEPLOYMENT_STAGE

    # The URL to the DSS (aka Blue box) REST API
    AZUL_DSS_ENDPOINT

    # The name of the hosted zone in Route 53 in which to create user friendly
    # domain names for various API gateways. This hosted zone will have to be
    # created manually prior to running `make terraform`. The value is typically
    # not deployment specific. A subdomain will automatically be created for
    # each deployment.
    AZUL_DOMAIN_NAME

    # The domain name of the HCA DRS endpoint. The service lambda serves
    # requests under both its canonical domain name as well as the domain name
    # given here. It is assumed that the parent domain of the given domain is
    # a hosted zone in Route 53 that we can create additional certificate
    # validation records in. If unset or set to empty string, the service lambda
    # will only serve requests under its canonical domain name and no validation
    # records will be created in hosted zones other than the zone defined by
    # AZUL_DOMAIN_NAME.
    AZUL_DRS_DOMAIN_NAME

    # A template for the name of the Route 53 record set in the hosted zone
    # specified by AZUL_DOMAIN_NAME. The string {lambda_name} in the template
    # will be substituted with the name of the Lambda function, e.g. `indexer`
    # or `service`. May contain periods.
    AZUL_SUBDOMAIN_TEMPLATE

    # A prefix to be prepended to the names of AWS Lambda functions and
    # associated resources. Must not contain periods.
    AZUL_RESOURCE_PREFIX

    # The host and port of the Elasticsearch instance to use. This takes
    # precedence over AZUL_ES_DOMAIN.
    AZUL_ES_ENDPOINT

    # The name of the AWS-hosted Elasticsearch instance (not a domain name) to
    # use. The given ES domain's endpoint will be looked up dynamically.
    AZUL_ES_DOMAIN

    # Boolean value, 1 to share `dev` ES domain, 0 to create your own
    AZUL_SHARE_ES_DOMAIN

    # Prefix to describe ES indices
    AZUL_INDEX_PREFIX

    # The number of nodes in the AWS-hosted Elasticsearch cluster
    AZUL_ES_INSTANCE_COUNT

    # The EC2 instance type to use for a cluster node
    AZUL_ES_INSTANCE_TYPE

    # The size of the EBS volume backing each cluster node
    AZUL_ES_VOLUME_SIZE

    # Elasticsearch operation timeout in seconds
    AZUL_ES_TIMEOUT

    # The name of the bucket where TerraForm maintains its state, allowing
    # multiple developers to collaboratively use TerraForm in a single AWS
    # account. This bucket is likely going be shared with other projects such as
    # DSS and might require some coordination with the developers of those
    # projects.
    AZUL_TERRAFORM_BACKEND_BUCKET

    # The number of workers pulling files from DSS. There is one such set of DSS
    # workers per index worker!
    AZUL_DSS_WORKERS

    # Whether to create a subscription to DSS during deployment. Set this
    # variable to 1 to enable `make deploy` to subscribe the indexer in the
    # active deployment to DSS bundle events. Making a subscription requires
    # authenticating against DSS using a Google service account specific to this
    # deployment.
    #
    # If making the subscription is enabled, `make terraform` will automatically
    # set up the Google service account for the indexer and deposit its
    # credentials into AWS secrets manager. For this to work you need to
    # configure your *personal* service account credentials in
    # `environment.local` enabling Terraform to create the shared *indexer*
    # service account. The two variables that need to be set are
    # GOOGLE_APPLICATION_CREDENTIALS and GOOGLE_PROJECT. These are well
    # documented. You need to use service account credentials, `gcloud auth
    # login` apparently does not work for this.
    #
    # Set this variable to 0 to prevent the registration of a subscription and
    # to disable the creation of the Google service account. You won't need to
    # configure any Google credentials in that case. Note that disabling the
    # subscription registration won't remove any existing subscriptions. Use
    # `scripts/subscribe.py -U` for that.
    #
    # If you set this variable back from 1 to 0 on an existing deployment, be
    # sure to run `make terraform` right afterwards so the Google cloud
    # resources are physically deleted. After that you may also unset the
    # GOOGLE_.. variables in your environment.
    AZUL_SUBSCRIBE_TO_DSS

    # The number of concurrently running indexer lambda executions. Chalice
    # creates one Lambda function for handling HTTP requests from API Gateway
    # and one additional Lambda function per event handler. The concurrency
    # limit applies to each such function independently. See
    # https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html
    # for details. This setting may also be used to drive other scaling choices,
    # like the number of shards in Elasticsearch.
    #
    AZUL_INDEXER_CONCURRENCY

    # The name of the S3 bucket where the manifest API stores the downloadable
    # content requested by client.
    AZUL_S3_BUCKET

    # Name of the Route 53 zone used for shortened URLs.
    # This hosted zone will have to be created manually prior to running
    # `make terraform`. Personal deployments typically share a zone with the
    # `dev` deployment.
    # If this variable is empty, a route 53 record will not be created and it
    # is assumed that the record and zone have been created manually.  This is
    # the case for staging, integration, and prod environments.
    AZUL_URL_REDIRECT_BASE_DOMAIN_NAME

    # Full domain name to be used in the URL redirection URLs
    # This is also used as the name of the S3 bucket used to store URL
    # redirection objects
    AZUL_URL_REDIRECT_FULL_DOMAIN_NAME

    # Enables deployment of monitoring resources and enables logging of all API
    # Gateway traffic through CloudWatch (1 yes, 0 no).
    # Typically only set for main deployments.
    AZUL_ENABLE_MONITORING

    # Boolean value, 1 to upload a manifest in a single request to S3, 0 to
    # upload the manifest in multiple concurrent requests for equal parts of
    # a smaller size. This allows the manifest generation code to start
    # uploading the manifest to S3 while the manifest data is still being
    # fetched from Elasticsearch, shortening the overall time needed to
    # generate and upload the manifest.
    AZUL_DISABLE_MULTIPART_MANIFESTS

    # The default bundle UUID prefix to use for reindexing bundles in the DSS
    # and for subscriptions to the DSS. If this variable is set to a non-empty
    # string, only bundles whose UUID starts with the specified string will be
    # indexed.
    azul_dss_query_prefix

    # The URL Prefix of Fusillade (Authentication Broker Service)
    AZUL_FUSILLADE_ENDPOINT

    # A URL pointing at the REST API of the Grafana instance that should host
    # the Azul dashboard. Typically only set for main deployments.
    azul_grafana_endpoint

    # The user name with which to authenticate against the Grafana instance.
    # Typically only set for main deployments.
    azul_grafana_user

    # The password with which to authenticate against the Grafana instance.
    # Typically only set for main deployments.
    azul_grafana_password

    # Maximum batch size for data export to DSS Collection API
    AZUL_CART_EXPORT_MAX_BATCH_SIZE

    # The minimum remaining lifespan of the access token (JWT) for cart export
    # in seconds
    AZUL_CART_EXPORT_MIN_ACCESS_TOKEN_TTL

    # A short string (no punctuation allowed) that identifies a Terraform
    # component i.e., a distinct set of Terraform resources to be deployed
    # together but separately from resources in other components. They are
    # typically defined in a subdirectory of the `terraform` directory and have
    # their own directory under `deployments`. The main component is identified
    # by the empty string and its resources are defined in the `terraform`
    # directory.
    azul_terraform_component

    # The slug of a the Github repository hosting this fork of Azul
    azul_github_project

    # An Github REST API access token with permission to post status checks to
    # the repository defined in `azul_github_project`.
    azul_github_access_token

)

unset ${azul_vars[*]}

azul_home="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

if [[ ! -f "${azul_home}/deployments/.active/environment" ]]; then
    echo "Please create a symlink to the active deployment. " \
         "For example 'cd deployments && ln -snf dev .active'"
    return
fi

_sanitize () (
    shopt -s nocasematch
    if [[ $1 == *password* || $1 == *token* || $1 == *secret* ]]; then
        echo -n "REDACTED"
    else
        echo -n "$2"
    fi
)

_set () {
    for var in ${azul_vars[*]}; do
        if [[ ${var} == $1 ]]; then
            eval ": \${$1:='$2'}"
            # Only echo in interactive shells
            if [[ -n $PS1 ]]; then
                self=${BASH_SOURCE[1]#${azul_home}/}
                value="$(_sanitize "$1" "$2")"
                if [[ ${!1} == $2 ]]; then
                    echo ${self}: Set $1 to "'$value'"
                else
                    echo ${self}: Not setting $1 to "'$value'"
                fi
            fi
            return
        fi
    done
    echo "Error: variable $1 is missing from azul_vars."
    unset ${azul_vars[*]}
    # That's the only way (I know of) we can exit the sourced script from within
    # a function
    kill -SIGINT $$
}

# Set variables specific to the active deployment and the current user. This is
# the most specific level.
if [[ -f "${azul_home}/deployments/.active/environment.local" ]]; then
    source "${azul_home}/deployments/.active/environment.local"
fi

# Set variables specific to the active deployment
source "${azul_home}/deployments/.active/environment"

# Set variables specific to the current user
if [[ -f "${azul_home}/environment.local" ]]; then
    source "${azul_home}/environment.local"
fi

# Set the global defaults. This is the least specific level.

_set AZUL_DEBUG 0
_set AZUL_DOMAIN_NAME "$AZUL_DEPLOYMENT_STAGE.explore.data.humancellatlas.org"
_set AZUL_DRS_DOMAIN_NAME ""
_set AZUL_SUBDOMAIN_TEMPLATE "{lambda_name}"
_set AZUL_RESOURCE_PREFIX "azul"
_set AZUL_INDEX_PREFIX "azul"
_set AZUL_ES_DOMAIN "azul-index-$AZUL_DEPLOYMENT_STAGE"
_set AZUL_SHARE_ES_DOMAIN 0
_set AZUL_S3_BUCKET "azul-storage-$AZUL_DEPLOYMENT_STAGE"
_set AZUL_URL_REDIRECT_BASE_DOMAIN_NAME ""
_set AZUL_URL_REDIRECT_FULL_DOMAIN_NAME "$AZUL_DEPLOYMENT_STAGE.url.data.humancellatlas.org"
_set AZUL_ES_INSTANCE_COUNT 2
_set AZUL_ES_INSTANCE_TYPE "r4.2xlarge.elasticsearch"  # Indexing performance benefits from the increased memory offered
                                                       # by the `r` family, especially now that the number of shards is
                                                       # tied to the indexer Lambda concurrency. 2xlarge was chosen
                                                       # heuristically to accomodate scale tests.
_set AZUL_ES_VOLUME_SIZE 70
_set AZUL_ES_TIMEOUT 60  # matches AWS' own timeout on the ELB sitting in front of ES:
                         # https://forums.aws.amazon.com/thread.jspa?threadID=233378
_set AZUL_DSS_WORKERS 8
_set AZUL_INDEXER_CONCURRENCY 64
_set AZUL_SUBSCRIBE_TO_DSS 1
_set AZUL_DISABLE_MULTIPART_MANIFESTS 0

_set AZUL_TERRAFORM_BACKEND_BUCKET "org-humancellatlas-azul-dev-config"

_set AZUL_ENABLE_MONITORING 0

_set azul_dss_query_prefix

_set AZUL_FUSILLADE_ENDPOINT "https://auth.dev.data.humancellatlas.org"
_set AZUL_CART_EXPORT_MAX_BATCH_SIZE 100
_set AZUL_CART_EXPORT_MIN_ACCESS_TOKEN_TTL 3600

_set azul_terraform_component

_set azul_github_project "DataBiosphere/azul"

_set azul_github_access_token

unset -f _set

export ${azul_vars[*]}

# A little helper to make re-sourcing this script easier.
#
_refresh () {
    source ${azul_home}/environment
}

# Manage the symlink to the active deployment
#
_select () {
    if [[ $1 != "" ]]; then
        ( # use sub-shell so `cd` is temporary
            cd ${azul_home}/deployments &&
            test -d "$1" &&
            { [ ! -e .active ] || { [ -L .active ] && rm .active ;} ;} &&
            ln -s "$1" .active
        ) || { echo error: "$1" && return ;}
        _refresh
    fi
    ( cd ${azul_home}/deployments && ls -l .active )
}

export PYTHONPATH="${azul_home}/src:${azul_home}/test"
export MYPYPATH="${azul_home}/stubs"
export TF_DATA_DIR="${azul_home}/deployments/.active/.terraform"

# HCA client caches Swagger specs downloaded from the DSS endpoint here
export XDG_CONFIG_HOME=${azul_home}/.config
