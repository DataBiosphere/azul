export project_root="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# A little helper to make re-sourcing this script easier.
#
_refresh () {
    source "${project_root}/environment"
}

# Manage the symlink to the active deployment
#
_select () {
    if [[ $1 != "" ]]; then
        ( # use sub-shell so `cd` is temporary
            cd "${project_root}/deployments" &&
            test -d "$1" &&
            { [ ! -e .active ] || { [ -L .active ] && rm .active ;} ;} &&
            ln -s "$1" .active
        ) || { echo error: "$1" && return ;}
        _refresh
    fi
    ( cd ${project_root}/deployments && ls -l .active )
}

# Get temporary credentials from STS via AssumeRole and inject them
# into the current environment where other AWS client libraries can
# find them.
#
# https://github.com/boto/boto3/issues/1179#issuecomment-569940530
#
_preauth () {
	eval $(
		python - <<- "EOF"
			from pathlib import Path
			import botocore.session
			import botocore.credentials

			# Get the AssumeRole credential provider and make it the only one
			session = botocore.session.get_session()
			resolver = session.get_component('credential_provider')
			assume_role_provider = resolver.get_provider('assume-role')
			resolver.providers = [assume_role_provider]

			# Make the provider use the same cache as the AWS CLI
			cli_cache = Path('~', '.aws', 'cli', 'cache').expanduser()
			assume_role_provider.cache = botocore.credentials.JSONFileCache(cli_cache)

			# Request the credentials. If the CLI has cached credentials, this step
			# would use those. If not, fresh ones will be requested from STS. If that
			# requires entering an MFA code, the user will be prompted. The fresh
			# credentials will be cached such that subsequent invocations just use them
			# until they expire.
			credentials = session.get_credentials()

			# Print the bash statement so they can be eval'ed
			print(f'export AWS_ACCESS_KEY_ID={credentials.access_key}')
			print(f'export AWS_SECRET_ACCESS_KEY={credentials.secret_key}')
			print(f'export AWS_SESSION_TOKEN={credentials.token}')
		EOF
	)
}

# We disable `envhook.py` to avoid redundancy. The `envhook.py` script imports
# `export_environment.py`, too. We could also pass -S to `python3` but that
# causes problems on Travis (`importlib.util` failing to import `contextlib`).
#
eval $(ENVHOOK=0 python3 "${project_root}/scripts/export_environment.py" || echo false)
