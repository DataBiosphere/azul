import json
import logging
from pathlib import (
    Path,
)
from textwrap import (
    dedent,
)

from furl import (
    furl,
)

from azul import (
    config,
    require,
)
from azul.http import (
    http_client,
)
from azul.logging import (
    configure_script_logging,
)
from azul.types import (
    JSON,
    MutableJSON,
)

repository_url = 'https://raw.githubusercontent.com/broadinstitute/anvil_tdr_ingest'
commit = '4e3b7385d4be552a0502c7c3091e9327c183c1ed'
object_path = 'anvil_schema/schema/mapping_schema_object.json'

log = logging.getLogger(__name__)


def read_schema() -> MutableJSON:
    schema_object_url = furl(repository_url) / commit / object_path
    http = http_client(log)
    response = http.request('GET', str(schema_object_url))
    require(response.status == 200)
    schema = json.loads(response.data)
    log.info('Downloaded AnVIL schema version %d', schema['version'])
    return schema


def write_schema(schema: JSON) -> None:
    script_path = Path(__file__).relative_to(config.project_root)
    output_path = Path(config.project_root) / 'src/azul/plugins/metadata/anvil/schema.py'
    with open(output_path, 'w') as f:
        f.write(dedent(f'''\
            """
            Auto-generated by {script_path}\n
            Do not edit this file directly.\n
            Instead, update the script and run `make anvil_schema`
            """
        '''))
        f.write('\nanvil_schema = ')
        # FIXME: Format AnVIL schema using reprlib #6292
        #        https://github.com/DataBiosphere/azul/issues/6292
        f.write(json.dumps(schema, indent=4)
                .replace('null', 'None')
                .replace('true', 'True')
                .replace('false', 'False')
                .replace('"', "'"))
        f.write('\n')
        import azul.plugins.metadata.anvil.schema as actual_schema
        assert actual_schema.anvil_schema == schema
        assert actual_schema.__file__ == str(output_path)
    log.info('Wrote AnVIL schema to %s', output_path)


def main():
    schema = read_schema()
    write_schema(schema)


if __name__ == '__main__':
    configure_script_logging(log)
    main()
